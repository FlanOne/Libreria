CREATE TABLE cliente (
cliente_id integer primary key,
nombre varchar not null,
apelliddo varchar not null,
fecha_nacimiento date,
direccion varchar,
telefono varchar,
correo varchar,
contrasena varchar not null);

CREATE TABLE libro(
isbn varchar primary key,
libro_id integer ,
nombre varchar,
fecha_publicacion date,
precio integer,
sinopsis varchar,
--stock integer,
autor varchar ,
calificacion integer check(calificacion <= 5),
imagen varchar,
calificaciones integer);

create table inventario(
isbn varchar,
stock_actual integer,
stock_max integer,
CONSTRAINT isbn FOREIGN KEY (isbn)
        REFERENCES public.libro (isbn) MATCH SIMPLE
        
);

drop table inventario

CREATE TABLE public.boleta
(
    boleta_id integer,
    fecha date NOT NULL,
    total integer NOT NULL,
    cliente_id integer NOT NULL,
    PRIMARY KEY (boleta_id),
    CONSTRAINT cliente_id FOREIGN KEY (cliente_id)
        REFERENCES public.cliente (cliente_id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
        NOT VALID
);

CREATE TABLE public.libroxcompra
(
    isbn varchar NOT NULL,
    boleta_id integer NOT NULL,
    cantidad_comprada integer,
	sub_total integer,
    CONSTRAINT libro_id FOREIGN KEY (isbn)
        REFERENCES public.libro (isbn) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
        NOT VALID,
    CONSTRAINT boleta_id FOREIGN KEY (boleta_id)
        REFERENCES public.boleta (boleta_id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
        NOT VALID
);

 

insert into cliente values('1','Ernesto','Paredes','26/9/1999','Huechuraba','+34971083785','ernesto@gmail.com','123');
insert into cliente values('2','Benjamin','Sanchez','28/11/2000','Las Condes','642379224','benja@gmail.com','123');
insert into cliente values('3','Michelle','Santos','28/3/2000','Vitacura','+34912536908','michelle@gmail.com','123');



insert into libro values('9788481093353','1','DON QUIJOTE DE LA MANCHA (VOL. 1)','1/1/1605','25900',
						   'un hidalgo',
						  'Miguel cervantes','4','DonQuijote.jpg','6');
						  
insert into libro values('9788466657662','2','El camino de los reyes (EL archivo de las tormentas 1)','31/8/2010','28530',
						   'Anhelo los días previos a la Última Desolación. Los días en que los Heraldos nos abandonaron y los Caballeros Radiantes se giraron en nuestra contra. Un tiempo en que aún había magia en el mundo y honor en el corazón de los hombres. El mundo fue nuestro, pero lo perdimos. Probablemente no hay nada más estimulante para las almas de los hombres que la victoria. ¿O tal vez fue la victoria una ilusión durante todo ese tiempo? ¿Comprendieron nuestros enemigos que cuanto más duramente luchaban, más resistíamos nosotros? Quizá vieron que el fuego y el martillo tan solo producían mejores espadas. Pero ignoraron el acero durante el tiempo suficiente para oxidarse. Hay cuatro personas a las que observamos. La primera es el médico, quien dejó de curar para convertirse en soldado durante la guerra más brutal de nuestro tiempo. La segunda es el asesino, un homicida que llora siempre que mata. La tercera es la mentirosa, una joven que viste un manto de erudita sobre un corazón de ladrona. Por último está el alto príncipe, un guerrero que mira al pasado mientras languidece su sed de guerra. El mundo puede cambiar. La potenciación y el uso de las esquirlas pueden aparecer de nuevo, la magia de los días pasados puede volver a ser nuestra. Esas cuatro personas son la clave. Una de ellas nos redimirá. Y una de ellas nos destruirá.',
						  'Brandon Sanderson','3','StormLight.jpg','5');

insert into libro values('9788415922940','3','Vagabond 01','25/7/2013','9990',
						   'Takezo y Matahachi. dos chicos de 17 años que sueñan con alcanzar la fama, ganaran o perderan?, sobreviviran o moriran?.',
						  'Takehiko Inoue','2','Vagabond01.jpg','9');
						  
insert into libro values('9789877251470','4','Cancion de hielo y fuego 1: Juego de tronos','1/1/2014','36770',
						 'Juego de tronos es el primer volumen de Canción de hielo y fuego, la monumental saga de fantasía épica del escritor George R. R. Martin que ha vendido más de 20 millones de ejemplares en todo el mundo. De la saga que inspiró la filmación de la aclamada serie televisiva de HBO: Game of Thrones. En el legendario mundo de los Siete Reinos, donde el verano puede durar décadas y el invierno toda una vida, y donde rastros de una magia inmemorial surgen en los rincones más sombríos, la tierra del norte, Invernalia, está resguardada por un colosal muro de hielo que detiene a fuerzas oscuras y sobrenaturales. En este majestuoso escenario, lord Stark y su familia se encuentran en el centro de un conflicto que desatará todas las pasiones: la traición y la lealtad, la compasión y la sed de venganza, el amor y el poder, la lujuria y el incesto, todo ello para ganar la más mortal de las batallas: el trono de hierro, una poderosa trampa que atrapará a los personajes... y al lector.',
						'George R.R. Martin','4','hieloyfuego.jpg','5');
						
insert into libro values('8420651362','5','La Metamorfosis','2/10/1915','12590',
						 'La metamorfosis, obra del escritor checo Franz Kafka uno de los autores fundamentales de la literatura del pasado siglo, continúa, con ilustraciones del dibujante valenciano Paco Roca, la colección Clásicos Ilustrados de Astiberri, donde una novela completa o, como en este caso, una recopilación de relatos de un autor de referencia de la literatura, es interpretada gráficamente por un dibujante de cómics con una serie de ilustraciones distribuidas a lo largo del libro principalmente a toda página.Paco Roca no tenía dudas a la hora de elegir a Kafka como autor clásico sobre el que alzar su mirada: Desde que leyera de crío La metamorfosis, Kafka se convirtió en uno de mis autores favoritos. Recuerdo que pasar de Julio Verne a leer La metamorfosis fue para mí todo un golpe, me pasé meses intentando asimilar aquello. Es una sensación que aún sigo teniendo con Kafka, sus relatos nunca me dejan indiferente. Debo reconocer que mi novela gráfica Las calles de arena está muy influenciada por El castillo o El proceso, confiesa Paco Roca.El autor de Arrugas se ha dejado llevar por el camino de la experimentación, evitando reproducir momentos concretos del libro o hacerlo de una forma muy explícita, para indagar en partes del relato que están en el fondo del mismo o tomar un punto de vista distinto al del narrador de turno: Espero que las licencias que me he tomado con el texto original no hagan revolverse a los puristas de Kafka. Los cuentos de Kafka me parecen muy sugerentes; esa atmósfera opresiva que crea, esos personajes... Me atraía mucho meterme en esos relatos y crear historias paralelas dentro de ellos. Incluso me he quedado con las ganas de desarrollar alguna de ellas en un cómic. Quizá algún día, aventura Roca.La casi treintena de ilustraciones, algunas de ellas a media o doble página, pone en imágenes tanto La metamorfosis, que abre la recopilación, como los relatos de La condena, El fogonero. Un fragmento, En la colonia penitenciaria, El maestro rural, Un médico rural, El cazador Gracchus, Chacales y árabes, La construcción de la Muralla China, Informe para una Academia, Un artista del hambre y, por último, Josefina, la cantora, o el pueblo de los ratones.',
						 'Franz Kafka','3','metamorfosis.jpg','8');
						 
insert into inventario values('9788481093353','30','30');
insert into inventario values('9788466657662','30','30');
insert into inventario values('9788415922940','30','30');
insert into inventario values('9789877251470','30','30');
insert into inventario values('8420651362','30','30');
select * from inventario;						  

	
select * from boleta;

insert into boleta values('1','12/12/2022','28530','1');
insert into boleta values('2','12/12/2022','9990','2');
insert into boleta values('3','12/12/2022','25900','3');
insert into boleta values('4','1/9/2021','12590','1');
insert into boleta values('5','12/12/2022','28530','1');
						  
select * from libroxcompra;

insert into libroxcompra values('9788466657662','1','1');
insert into libroxcompra values('9788415922940','2','1');
insert into libroxcompra values('9788481093353','3','1');
insert into libroxcompra values('8420651362','4','1');
insert into libroxcompra values('9788466657662','5','2');


--creacion de triggers

---------------------------------------------------------------------------
--trigger que crea por defecto un espacio de inventario al momento de 
create or replace function insertar_inv() returns trigger
as $a$
declare

begin
insert into inventario values (new.isbn, '30','30');
return new;
end
$a$
LANGUAGE plpgsql;

create or replace trigger  tr_insert after insert on libro
for each row
execute procedure insertar_inv();

------------------------------------------------------------------

--retorna un true o un false si la cantidad comprada es mayor o no al stock actual de producto
CREATE OR REPLACE FUNCTION existe(maradona varchar, canti int) RETURNS boolean AS $$
DECLARE
   actu int;
BEGIN
   SELECT stock_actual INTO actu FROM inventario WHERE isbn=maradona;
   IF canti <= actu THEN
      RETURN true;
   ELSE
       RETURN false;
   END IF;
END
$$ LANGUAGE plpgsql;
drop function existe(character varying,integer)


--!suma todos los sub_totales de los libros y actualiza el total de la boleta
CREATE OR REPLACE FUNCTION sp_actualiza_total(id_b int) returns numeric  AS $$
DECLARE
   suma numeric := 0;
BEGIN
   SELECT sum(sub_total) INTO suma FROM libroxcompra WHERE boleta_id = id_b;
   UPDATE boleta SET total = suma WHERE boleta_id = id_b;
   return suma;
END
$$ LANGUAGE plpgsql;

--!reduce el inventario dependiendo de la cantidad seleccioanda que se compro
CREATE OR REPLACE FUNCTION trg_venta() RETURNS TRIGGER AS $$
DECLARE
  existe_boleta int;
  saldo boolean;
  idt varchar;
BEGIN
	idt:=new.isbn;
  SELECT count(boleta_id) INTO existe_boleta FROM boleta WHERE boleta_id = NEW.boleta_id;
  IF existe_boleta = 0 THEN
     RAISE EXCEPTION 'boleta_no_existe';
  END IF;
  saldo := existe(idt, NEW.cantidad_comprada);
  IF saldo THEN
     UPDATE inventario SET stock_actual = stock_actual - NEW.cantidad_comprada WHERE isbn = idt;
  ELSE
     RAISE EXCEPTION 'saldo_insuficiente';
  END IF;
  RETURN NEW;
EXCEPTION
  WHEN OTHERS THEN
     RAISE;
END
$$ LANGUAGE plpgsql;



CREATE OR REPLACE FUNCTION trg_actualiza_monto() RETURNS TRIGGER AS $$
BEGIN
  PERFORM sp_actualiza_total(NEW.boleta_id);
  RETURN NEW;
END
$$ LANGUAGE plpgsql;

CREATE TRIGGER trg_venta_trigger
BEFORE INSERT ON libroxcompra
FOR EACH ROW
EXECUTE FUNCTION trg_venta();

CREATE TRIGGER trg_actualiza_monto_trigger
AFTER INSERT ON libroxcompra
FOR EACH ROW
EXECUTE FUNCTION trg_actualiza_monto();





-----------------------------------------------------------------------------------------------------------------

--procedimiento que actualiza los precios de los libroxcompra
--actualiza todos los sub totales de libroxcompra
create or replace procedure pr_actualizar_precios() as $$ 
declare cur_detalles cursor for select * from libroxcompra;
saldo int;

begin

	for reg in cur_detalles loop
		select l.precio * x.cantidad_comprada into saldo
		from libroxcompra x join libro l on (x.isbn = l.isbn) where x.isbn = reg.isbn;
		if saldo > 0 then
			update libroxcompra set sub_total=saldo where isbn = reg.isbn and boleta_id = reg.boleta_id;
		end if;
		
	end loop;
	
end
$$
LANGUAGE plpgsql;

CALL pr_actualizar_precios();

--------------------------------------------------------------------------------------------------------------------
CREATE OR REPLACE FUNCTION descuento_cumpleanos()
RETURNS TRIGGER AS $$
BEGIN
    DECLARE
        fecha_cumpleanos DATE;
    BEGIN
        SELECT fecha_nacimiento INTO fecha_cumpleanos
        FROM cliente
        WHERE cliente_id = NEW.cliente_id;

        IF EXTRACT(DAY FROM CURRENT_DATE) = EXTRACT(DAY FROM fecha_cumpleanos) AND
           EXTRACT(MONTH FROM CURRENT_DATE) = EXTRACT(MONTH FROM fecha_cumpleanos) THEN
            NEW.total := NEW.total * 0.5;
        END IF;

        RETURN NEW;
    END;
END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE TRIGGER trigger_descuento_cumpleanos
BEFORE INSERT ON boleta
FOR EACH ROW
EXECUTE FUNCTION descuento_cumpleanos();

--Probar.
select * from cliente;
INSERT INTO boleta (boleta_id, fecha, total, cliente_id)
VALUES (8, '2023-09-26', 10000, 1);
SELECT * FROM boleta;
select * from libroxcompra

	
	
	
---------------------------------------------------------------------------------------------------------------------	
	
CREATE OR REPLACE FUNCTION verificar_participacion()
RETURNS TRIGGER AS $$
DECLARE
    cantidad_libros INTEGER;
    fecha_actual DATE;
BEGIN
    SELECT COUNT(*) INTO cantidad_libros
    FROM libroxcompra
    WHERE boleta_id = NEW.boleta_id;

    fecha_actual := CURRENT_DATE;
	--dia del libro
    IF EXTRACT(DAY FROM fecha_actual) = 23 AND EXTRACT(MONTH FROM fecha_actual) = 4 THEN
        -- Verifica la cantidad de libros y muestra el mensaje correspondiente
        IF cantidad_libros = 2 THEN
            RAISE NOTICE 'Puede participar. Tiene un 15%% de probabilidades de ganar.';
        ELSIF cantidad_libros = 4 THEN
            RAISE NOTICE 'Puede participar. Tiene un 35%% de probabilidades de ganar.';
        ELSIF cantidad_libros = 6 THEN
            RAISE NOTICE 'Puede participar. Tiene un 50%% de probabilidades de ganar.';
        ELSIF cantidad_libros = 3 OR cantidad_libros = 5 THEN
            RAISE NOTICE 'No puede participar.';
        ELSE
            RAISE NOTICE 'No puede participar.';
        END IF;
    ELSE
        RAISE NOTICE 'No puede participar.';
    END IF;

    RETURN NEW;
END
$$ LANGUAGE plpgsql;

CREATE OR REPLACE TRIGGER trigger_verificar_participacion
AFTER update ON boleta
FOR EACH ROW
EXECUTE FUNCTION verificar_participacion();

--Probar.
select * from boleta;
select * from cliente;
select * from libroxcompra;

INSERT INTO boleta (boleta_id, fecha, total, cliente_id)
VALUES (1, '2023-04-23', 10000, 1);

INSERT INTO libroxcompra (isbn, boleta_id, cantidad_comprada, sub_total)
VALUES ('9788415922940', 10, 1, 9990);

DO $$
DECLARE
    mensaje TEXT;
BEGIN
    PERFORM verificar_participacion();

    GET DIAGNOSTICS mensaje = PG_CONTEXT;

    RAISE NOTICE '%', mensaje;
END $$	



------------------------------------------------



--Función rotorna calificación promedio y su autor.
CREATE OR REPLACE FUNCTION obtener_calificacion_promedio(isbn_param VARCHAR)
RETURNS TABLE (autor VARCHAR, calificacion_promedio NUMERIC) AS $$
BEGIN
    RETURN QUERY
    SELECT l.autor, AVG(l.calificacion) AS calificacion_promedio
    FROM libro l
    WHERE l.isbn = isbn_param
    GROUP BY l.autor;
END;
$$ LANGUAGE plpgsql;

--Probar.
SELECT * FROM obtener_calificacion_promedio('9788481093353');

--Función informe clientes con el libro comprado y la fecha la cual se compró.
CREATE OR REPLACE FUNCTION obtener_informe_clientes_libros()
RETURNS TABLE (
    cliente_id INTEGER,
    cliente_nombre VARCHAR,
    libro_nombre VARCHAR,
    fecha_compra DATE
)
AS $$
BEGIN
    RETURN QUERY
    SELECT c.cliente_id, c.nombre AS cliente_nombre, l.nombre AS libro_nombre, b.fecha AS fecha_compra
    FROM cliente c
    JOIN boleta b ON c.cliente_id = b.cliente_id
    JOIN libroxcompra lc ON b.boleta_id = lc.boleta_id
    JOIN libro l ON lc.isbn = l.isbn;
END;
$$ LANGUAGE plpgsql;

--Probar.
SELECT * FROM obtener_informe_clientes_libros();



--Trigger que registra en tabla la creación de nuevo usuario la cual muestra el correo y fecha.
CREATE TABLE registro_sesion_cliente (
    id SERIAL PRIMARY KEY,
    correo VARCHAR NOT NULL,
    fecha_hora_inicio TIMESTAMP NOT NULL
);

CREATE OR REPLACE FUNCTION registrar_sesion_cliente()
RETURNS TRIGGER AS $$
BEGIN
    INSERT INTO registro_sesion_cliente (correo, fecha_hora_inicio)
    VALUES (NEW.correo, CURRENT_TIMESTAMP);

    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE TRIGGER trigger_registro_sesion_cliente
AFTER INSERT ON cliente
FOR EACH ROW
EXECUTE FUNCTION registrar_sesion_cliente();

--Probar.
select * from cliente;

INSERT INTO cliente (cliente_id, nombre, apelliddo, contrasena, correo) 
VALUES (6, 'Marianela', 'Lara', '123', 'marianela@gmail.com');

SELECT * FROM registro_sesion_cliente;


--Procedimiento que cuenta las compras de un cliente desde una fecha inicial y fecha final.
CREATE OR REPLACE PROCEDURE contar_compras_cliente(
    p_cliente_id INTEGER,
    p_fecha_inicial DATE,
    p_fecha_final DATE,
    OUT total_compras INTEGER
)
AS $$
BEGIN
    SELECT COUNT(*) INTO total_compras
    FROM boleta b
    JOIN libroxcompra lc ON b.boleta_id = lc.boleta_id
    WHERE b.cliente_id = p_cliente_id
    AND b.fecha BETWEEN p_fecha_inicial AND p_fecha_final;
END;
$$ LANGUAGE plpgsql;

--Probar.
DO $$
DECLARE
    total INTEGER;
BEGIN
    CALL contar_compras_cliente(4, '2023-07-07', '2023-07-07', total);
    RAISE NOTICE 'El cliente ha realizado % compras en el rango de fechas especificado.', total;
END $$;
-----------------------------------------------------------------------------------------------
--Procedimiento que genera informe de inventario.
CREATE OR REPLACE PROCEDURE generar_reporte_inventario()
AS $$
DECLARE
    libro_row libro%ROWTYPE;
    inventario_row inventario%ROWTYPE;
BEGIN
    FOR libro_row IN SELECT * FROM libro
    LOOP
        RAISE NOTICE 'Libro: %', libro_row.nombre;

        SELECT * INTO inventario_row
        FROM inventario
        WHERE isbn = libro_row.isbn;

        RAISE NOTICE 'Stock actual: %, Stock máximo: %', inventario_row.stock_actual, inventario_row.stock_max;

        RAISE NOTICE '----------------------------------------';
    END LOOP;
END;
$$ LANGUAGE plpgsql;

--Probar.
CALL generar_reporte_inventario();

--Procedimiento autores y cantidad de libros.
CREATE OR REPLACE PROCEDURE generar_informe_total_libros_autores()
AS $$
DECLARE
    total_libros INTEGER;
    total_autores INTEGER;
BEGIN
    SELECT COUNT(*) INTO total_libros FROM libro;
    SELECT COUNT(DISTINCT autor) INTO total_autores FROM libro;

    RAISE NOTICE 'Total de libros: %', total_libros;
    RAISE NOTICE 'Total de autores: %', total_autores;
END;
$$ LANGUAGE plpgsql;

--Probar.
CALL generar_informe_total_libros_autores();

select * from inventario;

